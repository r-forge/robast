
R Under development (unstable) (2025-01-10 r87562 ucrt) -- "Unsuffered Consequences"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RobExtremes"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('RobExtremes')
Loading required package: distrMod
Loading required package: distr
Loading required package: startupmsg
:startupmsg>  *** Utilities for Start-Up Messages ***
:startupmsg> 
:startupmsg>  Version information in start-up messages is
:startupmsg>  currently suppressed. To see such information on
:startupmsg>  startup as in versions of this pkg prior to this
:startupmsg>  versionr, set option "StartupBanner" to a value
:startupmsg>  different to {"off", "no-version", "no -
:startupmsg>  version"}, e.g., by options("StartupBanner" =
:startupmsg>  "complete") or by options("StartupBanner" = NULL)
:startupmsg>  or by options("StartupBanner" = "something else").
:startupmsg> 
:startupmsg>  Detailed information about which packages are
:startupmsg>  currently loaded or attached at which version
:startupmsg>  (regardless of whether these have start-up
:startupmsg>  messages managed by this package) can be obtained
:startupmsg>  by "sessionInfo()".
:startupmsg> 
:startupmsg> 
Loading required package: sfsmisc
:distr>  *** Object Oriented Implementation of Distributions ***
:distr> 
:distr> 

Attaching package: 'distr'

The following objects are masked from 'package:stats':

    df, qqplot, sd

Loading required package: distrEx
:distrEx>  *** Extensions of Package 'distr' ***
:distrEx> 
:distrEx> 

Attaching package: 'distrEx'

The following objects are masked from 'package:stats':

    IQR, mad, median, var

Loading required package: RandVar
:RandVar>  *** Implementation of Random Variables ***
:RandVar> 
:RandVar> 
Loading required package: MASS
Loading required package: stats4
:distrMod>  *** Object Oriented Implementation of Probability
:distrMod>  Models ***
:distrMod> 
:distrMod> 

Attaching package: 'distrMod'

The following object is masked from 'package:stats4':

    confint

The following object is masked from 'package:stats':

    confint

The following object is masked from 'package:base':

    norm

Loading required package: ROptEst
Loading required package: RobAStBase
Loading required package: rrcov
Loading required package: robustbase
Scalable Robust Estimators with High Breakdown Point (version 1.7-6)

:RobAStBase>  *** Robust Asymptotic Statistics ***
:RobAStBase> 
:RobAStBase> 

Attaching package: 'RobAStBase'

The following object is masked from 'package:graphics':

    clip

Loading required package: evd
:RobExtremes>  *** Optimally Robust Estimation for Extreme
:RobExtremes>  Value Distributions ***
:RobExtremes> 
:RobExtremes> 

Attaching package: 'RobExtremes'

The following objects are masked from 'package:robustbase':

    Qn, Sn

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("E")
> ### * E
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E
> ### Title: Generic Function for the Computation of (Conditional)
> ###   Expectations
> ### Aliases: E DistributionsIntegratingByQuantiles-class E-methods
> ###   E,DistributionsIntegratingByQuantiles,function,missing-method
> ###   E,Gumbel,missing,missing-method E,GPareto,missing,missing-method
> ###   E,GPareto,function,missing-method E,GEV,function,missing-method
> ###   E,GEV,missing,missing-method E,Pareto,missing,missing-method
> ###   E,Pareto,function,missing-method
> ### Keywords: methods distribution
> 
> ### ** Examples
> 
> GP <- GPareto(shape=0.3)
> 
> E(GP)
[1] 1.428571
> E(GP, fun = function(x){2*x^2}) ## uses the log trafo
[1] 14.19846
> 
> P <- Pareto()
> E(P)
[1] Inf
> E(P,fun = function(x){1/(x^2+1)})
[1] 0.2145973
> 
> 
> 
> 
> cleanEx()
> nameEx("GEV-class")
> ### * GEV-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GEV-class
> ### Title: Generalized EV distribution
> ### Aliases: GEV-class initialize,GEV-method loc,GEV-method
> ###   loc<-,GEV-method location,GEV-method location<-,GEV-method
> ###   scale,GEV-method scale<-,GEV-method shape,GEV-method
> ###   shape<-,GEV-method +,GEV,numeric-method *,GEV,numeric-method
> ###   liesInSupport,GEV,numeric-method
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (P1 <- new("GEV", loc = 0, scale = 1,shape = 0))
Distribution Object of Class: GEV
 loc: 0
 scale: 1
 shape: 0
> plot(P1)
> shape(P1)
[1] 0
> loc(P1)
[1] 0
> scale(P1) <- 4
> loc(P1) <- 2
> shape(P1) <- -1 # may be negative!
> plot(P1)
> 
> 
> 
> cleanEx()
> nameEx("GEV")
> ### * GEV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GEV
> ### Title: Generating function for GEV-class
> ### Aliases: GEV
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (P1 <- GEV(loc = 0, scale = 1, shape = 0))
Distribution Object of Class: GEV
 loc: 0
 scale: 1
 shape: 0
> plot(P1)
> 
> E(GEV()) 
[1] 0.5772157
> E(P1)
[1] 0.5772157
> E(P1, function(x){x^2})
[1] 1.97807
> var(P1)
[1] 1.644934
> sd(P1)
[1] 1.28255
> median(P1)
[1] 0.3665129
> IQR(P1)
[1] 1.572534
> mad(P1)
[1] 0.7670497
> 
> 
> 
> 
> cleanEx()
> nameEx("GEVFamily")
> ### * GEVFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GEVFamily
> ### Title: Generating function for families of Generalized Extreme Value
> ###   distributions
> ### Aliases: GEVFamily
> ### Keywords: models
> 
> ### ** Examples
> 
> (G1 <- GEVFamily())
An object of class "GEVFamily"
### name:	GEV Family

### distribution:	Distribution Object of Class: GEV
 loc: 0
 scale: 1
 shape: 0.5

### param:	An object of class "ParamWithScaleAndShapeFamParameter"
name:	theta
scale:	1
shape:	0.5
fixed part of param.:
loc:	0
trafo:
function(x){ list(fval = tau(x), mat = Dtau(x)) }
<bytecode: 0x0000026082566380>
<environment: 0x0000026082554700>
Shape parameter must not be negative.
> FisherInfo(G1)
An object of class "PosSemDefSymmMatrix"
           scale      shape
scale  2.3652769 -0.9102992
shape -0.9102992  1.4748118
> checkL2deriv(G1)
precision of centering:	 -6.74773e-06 2.75461e-06 
precision of Fisher information:
            scale       shape
scale -5.1571e-04  1.0235e-03
shape  1.0235e-03 -1.2167e-03
precision of Fisher information - relativ error [%]:
     [,1]    [,2]   
[1,] -0.0218 -0.1124
[2,] -0.1124 -0.0825
condition of Fisher information:
[1] 3.1522
> 
> 
> 
> cleanEx()
> nameEx("GEVFamilyMuUnknown")
> ### * GEVFamilyMuUnknown
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GEVFamilyMuUnknown
> ### Title: Generating function for families of Generalized Extreme Value
> ###   distributions
> ### Aliases: GEVFamilyMuUnknown
> ### Keywords: models
> 
> ### ** Examples
> 
> (G1 <- GEVFamilyMuUnknown())
An object of class "GEVFamilyMuUnknown"
### name:	GEV Family

### distribution:	Distribution Object of Class: GEV
 loc: 0
 scale: 1
 shape: 0.5

### param:	An object of class "ParamWithLocAndScaleAndShapeFamParameter"
name:	theta
loc:	0
scale:	1
shape:	0.5
trafo:
function(x){ list(fval = tau(x), mat = Dtau(x)) }
<bytecode: 0x0000026079417690>
<environment: 0x0000026079405a10>
Shape parameter must not be negative.
> FisherInfo(G1)
An object of class "PosSemDefSymmMatrix"
           location      scale      shape
location  2.2500000 -1.8413192  0.9269425
scale    -1.8413192  2.3652769 -0.9102992
shape     0.9269425 -0.9102992  1.4748118
> checkL2deriv(G1)
precision of centering:	 4.579665e-06 -6.74773e-06 2.75461e-06 
precision of Fisher information:
            location       scale       shape
location -1.6657e-04  3.0136e-04 -3.8773e-04
scale     3.0136e-04 -5.1571e-04  1.0235e-03
shape    -3.8773e-04  1.0235e-03 -1.2167e-03
precision of Fisher information - relativ error [%]:
     [,1]    [,2]    [,3]   
[1,] -0.0074 -0.0164 -0.0418
[2,] -0.0164 -0.0218 -0.1124
[3,] -0.0418 -0.1124 -0.0825
condition of Fisher information:
[1] 8.7298
> 
> 
> 
> cleanEx()
> nameEx("GEVParameter-class")
> ### * GEVParameter-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GEVParameter-class
> ### Title: Parameter of generalized Pareto distributions
> ### Aliases: GEVParameter-class loc,GEVParameter-method
> ###   loc<-,GEVParameter-method location,GEVParameter-method
> ###   location<-,GEVParameter-method scale,GEVParameter-method
> ###   scale<-,GEVParameter-method shape,GEVParameter-method
> ###   shape<-,GEVParameter-method
> ### Keywords: distribution models
> 
> ### ** Examples
> 
> P <- new("GEVParameter")
> loc(P)
[1] 0
> ## same as
> location(P)
[1] 0
> scale(P)
[1] 1
> shape(P)
[1] 0.5
> 
> scale(P) <- 2
> location(P) <- 4
> shape(P) <- -1 # may be negative!
> P
An object of class "GEVParameter"
Slot "loc":
[1] 4

Slot "scale":
[1] 2

Slot "shape":
[1] -1

Slot "name":
[1] "Parameter of a generalized extreme value distribution"

> 
> 
> 
> cleanEx()
> nameEx("GPareto-class")
> ### * GPareto-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GPareto-class
> ### Title: Generalized Pareto distribution
> ### Aliases: GPareto-class initialize,GPareto-method loc,GPareto-method
> ###   loc<-,GPareto-method location,GPareto-method
> ###   location<-,GPareto-method scale,GPareto-method scale<-,GPareto-method
> ###   shape,GPareto-method shape<-,GPareto-method +,GPareto,numeric-method
> ###   *,GPareto,numeric-method liesInSupport,GPareto,numeric-method
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (P1 <- new("GPareto", loc = 0, scale = 1,shape = 0))
Distribution Object of Class: GPareto
 loc: 0
 scale: 1
 shape: 0
> plot(P1)
> shape(P1)
[1] 0
> loc(P1)
[1] 0
> scale(P1) <- 4
> location(P1) <- 2 ## same as loc(P1) <- 2
> shape(P1) <- -2 # may be negative
> plot(P1)
> 
> 
> 
> cleanEx()
> nameEx("GPareto")
> ### * GPareto
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GPareto
> ### Title: Generating function for GPareto-class
> ### Aliases: GPareto
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (P1 <- GPareto(loc = 1, scale = 1, shape = -0.5))
Distribution Object of Class: GPareto
 loc: 1
 scale: 1
 shape: -0.5
> plot(P1)
> 
> E(GPareto()) 
[1] 1
> E(P1)
[1] 1.666667
> E(P1, function(x){x^2})
[1] 2.999999
> var(P1)
[1] 0.2222222
> sd(P1)
[1] 0.4714045
> median(P1)
[1] 1.585786
> IQR(P1)
[1] 0.7320508
> mad(P1)
[1] 0.3535534
> 
> 
> 
> 
> cleanEx()
> nameEx("GParetoFamily")
> ### * GParetoFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GParetoFamily
> ### Title: Generating function for Generalized Pareto families
> ### Aliases: GParetoFamily
> ### Keywords: models
> 
> ### ** Examples
> 
> (G1 <- GParetoFamily())
An object of class "GParetoFamily"
### name:	Generalized Pareto Family

### distribution:	Distribution Object of Class: GPareto
 loc: 0
 scale: 1
 shape: 0.5

### param:	An object of class "ParamWithScaleAndShapeFamParameter"
name:	theta
scale:	1
shape:	0.5
fixed part of param.:
loc:	0
trafo:
function(x){ list(fval = tau(x), mat = Dtau(x)) }
<bytecode: 0x0000026082566380>
<environment: 0x0000026075473890>
Shape parameter must not be negative.
> FisherInfo(G1)
An object of class "PosSemDefSymmMatrix"
          scale     shape
scale 0.5000000 0.3333333
shape 0.3333333 0.6666667
> checkL2deriv(G1)
precision of centering:	 -9.9938e-08 -2.823744e-06 
precision of Fisher information:
            scale       shape
scale -4.9975e-07 -5.6457e-06
shape -5.6457e-06 -8.0135e-05
precision of Fisher information - relativ error [%]:
     [,1]      [,2]     
[1,] -9.99e-05 -1.69e-03
[2,] -1.69e-03 -1.20e-02
condition of Fisher information:
[1] 4.7929
> 
> 
> 
> cleanEx()
> nameEx("GParetoParameter-class")
> ### * GParetoParameter-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GParetoParameter-class
> ### Title: Parameter of generalized Pareto distributions
> ### Aliases: GParetoParameter-class loc,GParetoParameter-method
> ###   loc<-,GParetoParameter-method location,GParetoParameter-method
> ###   location<-,GParetoParameter-method scale,GParetoParameter-method
> ###   scale<-,GParetoParameter-method shape,GParetoParameter-method
> ###   shape<-,GParetoParameter-method
> ### Keywords: distribution models
> 
> ### ** Examples
> 
> P <- new("GParetoParameter")
> loc(P)
[1] 0
> ## same as
> location(P)
[1] 0
> scale(P)
[1] 1
> shape(P)
[1] 0
> 
> scale(P) <- 2
> loc(P) <- -5
> shape(P) <- -1 # may be negative
> P
An object of class "GParetoParameter"
Slot "loc":
[1] -5

Slot "scale":
[1] 2

Slot "shape":
[1] -1

Slot "name":
[1] "Parameter of a generalized Pareto distribution"

> 
> 
> 
> cleanEx()
> nameEx("Gumbel-class")
> ### * Gumbel-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Gumbel-class
> ### Title: Gumbel distribution
> ### Aliases: Gumbel-class initialize,Gumbel-method loc,Gumbel-method
> ###   loc<-,Gumbel-method scale,Gumbel-method scale<-,Gumbel-method
> ###   +,Gumbel,numeric-method *,Gumbel,numeric-method
> ###   liesInSupport,Gumbel,numeric-method
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (G1 <- new("Gumbel", loc = 1, scale = 2))
Distribution Object of Class: Gumbel
 loc: 1
 scale: 2
> plot(G1)
> loc(G1)
[1] 1
> scale(G1)
[1] 2
> loc(G1) <- -1
> scale(G1) <- 2
> plot(G1)
> 
> 
> 
> cleanEx()
> nameEx("Gumbel")
> ### * Gumbel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Gumbel
> ### Title: Generating function for Gumbel-class
> ### Aliases: Gumbel
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (G1 <- Gumbel(loc = 1, scale = 2))
Distribution Object of Class: Gumbel
 loc: 1
 scale: 2
> plot(G1)
> loc(G1)
[1] 1
> scale(G1)
[1] 2
> loc(G1) <- -1
> scale(G1) <- 2
> plot(G1)
> 
> E(Gumbel()) # Euler's constant
[1] -0.5772157
> E(G1, function(x){x^2})
[1] 6.60347
> 
> ## The function is currently defined as
> function(loc = 0, scale = 1){ 
+   new("Gumbel", loc = loc, scale = scale)
+ }
function (loc = 0, scale = 1) 
{
    new("Gumbel", loc = loc, scale = scale)
}
> 
> 
> 
> cleanEx()
> nameEx("GumbelLocationFamily")
> ### * GumbelLocationFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GumbelLocationFamily
> ### Title: Generating function for Gumbel location families
> ### Aliases: GumbelLocationFamily
> ### Keywords: models
> 
> ### ** Examples
> 
> ##current implementation is:
> theta <- 0
> names(theta) <- "loc"
> GL <- ParamFamily(name = "Gumbel location family",
+           param = ParamFamParameter(name = "location parameter", main = theta),
+           startPar = function(x,...) c(min(x),max(x)),
+           distribution = Gumbel(loc = 0, scale = 1), ## scale known!
+           modifyParam = function(theta){ Gumbel(loc = theta, scale = 1) },
+           props = paste(c("The Gumbel location family is invariant under",
+                     "the group of transformations 'g(x) = x + loc'",
+                     "with location parameter 'loc'"), collapse = " "))
> GL
An object of class "ParamFamily"
### name:	Gumbel location family

### distribution:	Distribution Object of Class: Gumbel
 loc: 0
 scale: 1

### param:	An object of class "ParamFamParameter"
name:	location parameter
loc:	0

### props:
[1] "The Gumbel location family is invariant under the group of transformations 'g(x) = x + loc' with location parameter 'loc'"
> 
> (G1 <- GumbelLocationFamily())
An object of class "GumbelLocationFamily"
### name:	Gumbel location family

### distribution:	Distribution Object of Class: Gumbel
 loc: 0
 scale: 1

### param:	An object of class "ParamFamParameter"
name:	loc
loc:	0
trafo:
    loc
loc   1

### props:
[1] "The Gumbel location family is invariant under"
[2] "the group of transformations 'g(x) = x + loc'"
[3] "with location parameter 'loc'"                
> plot(G1)
> Map(L2deriv(G1)[[1]])
[[1]]
function (x) 
{
    LogDeriv(x - c(loc = 0))
}
<environment: 0x000002607993ef90>

> checkL2deriv(G1)
precision of centering:	 1.51181e-06 
precision of Fisher information:
            loc
loc -2.6179e-05
precision of Fisher information - relativ error [%]:
     [,1]     
[1,] -2.62e-03
condition of Fisher information:
[1] 1
> 
> 
> 
> cleanEx()
> nameEx("GumbelParameter-class")
> ### * GumbelParameter-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GumbelParameter-class
> ### Title: Paramter of Gumbel distributions
> ### Aliases: GumbelParameter-class loc loc,GumbelParameter-method loc<-
> ###   loc<-,GumbelParameter-method scale,GumbelParameter-method
> ###   scale<-,GumbelParameter-method
> ### Keywords: distribution models
> 
> ### ** Examples
> 
> new("GumbelParameter")
An object of class "GumbelParameter"
Slot "loc":
[1] 0

Slot "scale":
[1] 1

Slot "name":
[1] "parameter of a Gumbel distribution"

> 
> 
> 
> cleanEx()
> nameEx("LDEstimate-class")
> ### * LDEstimate-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LDEstimate-class
> ### Title: LDEstimate-class.
> ### Aliases: LDEstimate-class dispersion dispersion,LDEstimate-method
> ###   location,LDEstimate-method show,LDEstimate-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> ## (empirical) Data
> x <- rgamma(50, scale = 0.5, shape = 3)
> 
> ## parametric family of probability measures
> G <- GammaFamily(scale = 1, shape = 2)
> 
> (S <- medQn(x, G))
Evaluations of medQn:
---------------------
An object of class "LDEstimate" 
generated by call
  medQn(x = x, ParamFamily = G)
samplesize:   50
estimate:
    scale     shape 
0.4252856 3.2817328 
Infos:
     method        message                            
[1,] "LDEstimator" "Location: median   Dispersion: Qn"
[2,] "LDEstimator" "medQn"                            
Location: 1.256759 
Dispersion: 0.3077828 
> dispersion(S)
     disp 
0.3077828 
> location(S)
     loc 
1.256759 
> 
> 
> 
> cleanEx()
> nameEx("LDEstimator")
> ### * LDEstimator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LDEstimator
> ### Title: Function to compute LD (location-dispersion) estimates
> ### Aliases: LDEstimator medkMAD medkMADhybr medSn medQn
> ### Keywords: univar
> 
> ### ** Examples
> 
> ## (empirical) Data
> set.seed(123)
> x <- rgamma(50, scale = 0.5, shape = 3)
> 
> ## parametric family of probability measures
> G <- GammaFamily(scale = 1, shape = 2)
> 
> medQn(x = x, ParamFamily = G)
Evaluations of medQn:
---------------------
An object of class "LDEstimate" 
generated by call
  medQn(x = x, ParamFamily = G)
samplesize:   50
estimate:
    scale     shape 
0.5748538 2.3529829 
Infos:
     method        message                            
[1,] "LDEstimator" "Location: median   Dispersion: Qn"
[2,] "LDEstimator" "medQn"                            
Location: 1.166582 
Dispersion: 0.3341902 
> medSn(x = x, ParamFamily = G, q.lo = 0.5, q.up = 4)
Evaluations of medSn:
---------------------
An object of class "LDEstimate" 
generated by call
  medSn(x = x, ParamFamily = G, q.lo = 0.5, q.up = 4)
samplesize:   50
estimate:
    scale     shape 
0.5332924 2.5118274 
Infos:
     method        message                            
[1,] "LDEstimator" "Location: median   Dispersion: Sn"
[2,] "LDEstimator" "medSn"                            
Location: 1.166582 
Dispersion: 0.6251234 
> 
> medkMAD(x = x, k=10, ParamFamily = G)
Evaluations of medkMAD:
-----------------------
An object of class "LDEstimate" 
generated by call
  medkMAD(x = x, ParamFamily = G, k = 10)
samplesize:   50
estimate:
    scale     shape 
0.3704849 3.4758452 
Infos:
     method        message                              
[1,] "LDEstimator" "Location: median   Dispersion: kMAD"
[2,] "LDEstimator" "medkMAD"                            
Location: 1.166582 
Dispersion: 0.1201433 
> 
> ##not at all robust:
> LDEstimator(x, loc.est = mean, disp.est = sd,
+                loc.fctal = E, disp.fctal = sd,
+             ParamFamily = G)
Evaluations of Some estimator:
------------------------------
An object of class "LDEstimate" 
generated by call
  LDEstimator(x = x, loc.est = mean, disp.est = sd, loc.fctal = E, 
    disp.fctal = sd, ParamFamily = G)
samplesize:   50
estimate:
    scale     shape 
0.4278364 2.8950667 
Infos:
     method        message                       
[1,] "LDEstimator" "Location: E   Dispersion: sd"
Location: 1.238615 
Dispersion: 0.7279567 
> 
> 
> 
> cleanEx()
> nameEx("Pareto-class")
> ### * Pareto-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Pareto-class
> ### Title: Pareto distribution
> ### Aliases: Pareto-class initialize,Pareto-method shape,Pareto-method
> ###   shape<-,Pareto-method Min,Pareto-method Min<-,Pareto-method
> ###   scale,Pareto-method *,Pareto,numeric-method
> ###   liesInSupport,Pareto,numeric-method
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (P1 <- new("Pareto", shape = 1, Min = 2))
Distribution Object of Class: Pareto
 shape: 1
 Min: 2
> plot(P1)
> shape(P1)
[1] 1
> Min(P1)
[1] 2
> shape(P1) <- 4
> Min(P1) <- 2
> plot(P1)
> 
> 
> 
> cleanEx()
> nameEx("Pareto")
> ### * Pareto
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Pareto
> ### Title: Generating function for Pareto-class
> ### Aliases: Pareto
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (P1 <- Pareto(shape = 1, Min = 1))
Distribution Object of Class: Pareto
 shape: 1
 Min: 1
> plot(P1)
> 
> E(Pareto()) 
[1] Inf
> E(P1)
[1] Inf
> E(P1, function(x){x^2})
[1] 41
> var(P1)
[1] NA
> sd(P1)
[1] NA
> median(P1)
[1] 2
> IQR(P1)
[1] 2.666667
> mad(P1)
[1] 0
> 
> 
> 
> 
> cleanEx()
> nameEx("ParetoFamily")
> ### * ParetoFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ParetoFamily
> ### Title: Generating function for Generalized Pareto families
> ### Aliases: ParetoFamily
> ### Keywords: models
> 
> ### ** Examples
> 
> (P1 <- ParetoFamily())
An object of class "ParetoFamily"
### name:	Generalized Pareto Family

### distribution:	Distribution Object of Class: Pareto
 shape: 0.5
 Min: 1

### param:	An object of class "ParamFamParameter"
name:	theta
shape:	0.5
fixed part of param.:
	Min:	1
trafo:
      shape
shape     1
> FisherInfo(P1)
An object of class "PosSemDefSymmMatrix"
      shape
shape     4
> checkL2deriv(P1)
precision of centering:	 0.365035 
precision of Fisher information:
        shape
shape -2.2357
precision of Fisher information - relativ error [%]:
     [,1]   
[1,] -55.894
condition of Fisher information:
[1] 1
> 
> 
> 
> cleanEx()
> nameEx("ParetoParameter-class")
> ### * ParetoParameter-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ParetoParameter-class
> ### Title: Paramter of Pareto distributions
> ### Aliases: ParetoParameter-class shape shape,ParetoParameter-method
> ###   shape<- shape<-,ParetoParameter-method Min,ParetoParameter-method
> ###   Min<-,ParetoParameter-method scale,ParetoParameter-method
> ### Keywords: distribution models
> 
> ### ** Examples
> 
> (P1 <- new("ParetoParameter"))
An object of class "ParetoParameter"
Slot "shape":
[1] 1

Slot "Min":
[1] 1

Slot "name":
[1] "Parameter of a Pareto distribution"

> Min(P1)
[1] 1
> shape(P1)
[1] 1
> 
> Min(P1) <- 3
> shape(P1) <- 4
> P1
An object of class "ParetoParameter"
Slot "shape":
[1] 4

Slot "Min":
[1] 3

Slot "name":
[1] "Parameter of a Pareto distribution"

> 
> 
> 
> 
> cleanEx()
> nameEx("PickandsEstimator")
> ### * PickandsEstimator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PickandsEstimator
> ### Title: Function to compute Pickands estimates for the GPD and GEVD
> ### Aliases: PickandsEstimator .PickandsEstimator
> ### Keywords: univar
> 
> ### ** Examples
> 
> ## (empirical) Data
> set.seed(123)
> x <- rgpd(50, scale = 0.5, shape = 3)
> y <- rgev(50, scale = 0.5, shape = 3)
> ## parametric family of probability measures
> P <- GParetoFamily(scale = 1, shape = 2)
> G <- GEVFamily(scale = 1, shape = 2)
> ##
> PickandsEstimator(x = x, ParamFamily = P)
Evaluations of PickandsEstimator:
---------------------------------
An object of class "Estimate" 
generated by call
  PickandsEstimator(x = x, ParamFamily = P)
samplesize:   50
estimate:
     scale       shape  
  0.5965601   2.6028314 
 (0.3762822) (0.9050787)
asymptotic (co)variance (multiplied with samplesize):
           scale     shape
scale   7.079416 -12.26167
shape -12.261670  40.95837
Infos:
     method              message
[1,] "PickandsEstimator" ""     
> PickandsEstimator(x = y, ParamFamily = G)
Evaluations of PickandsEstimator:
---------------------------------
An object of class "Estimate" 
generated by call
  PickandsEstimator(x = y, ParamFamily = G)
samplesize:   50
estimate:
     scale       shape  
  0.2180708   2.7928952 
 (0.2214988) (1.0254982)
asymptotic (co)variance (multiplied with samplesize):
          scale     shape
scale  2.453087 -7.936753
shape -7.936753 52.582325
Infos:
     method              message
[1,] "PickandsEstimator" ""     
> 
> 
> 
> cleanEx()
> nameEx("QuantileBCCEstimator")
> ### * QuantileBCCEstimator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: QuantileBCCEstimator
> ### Title: Function to compute QuantileBCC estimates for the Weibull Family
> ### Aliases: QuantileBCCEstimator .QBCC
> ### Keywords: univar
> 
> ### ** Examples
> 
> ## (empirical) Data
> set.seed(123)
> distroptions("withgaps"=FALSE)
> x <- rweibull(50, scale = 0.5, shape = 3)
> ##
> QuantileBCCEstimator(x = x)
Evaluations of QuantileBCCEstimator:
------------------------------------
An object of class "Estimate" 
generated by call
  QuantileBCCEstimator(x = x)
samplesize:   50
estimate:
     scale        shape   
  0.49554264   2.84974075 
 (0.02314181) (0.07798407)
asymptotic (co)variance (multiplied with samplesize):
            scale       shape
scale  0.02677717 -0.08974462
shape -0.08974462  0.30407578
Infos:
     method                 message
[1,] "QuantileBCCEstimator" ""     
> 
> 
> 
> cleanEx()
> nameEx("RobExtremesConstants")
> ### * RobExtremesConstants
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RobExtremesConstants
> ### Title: Built-in Constants in package RobExtremes
> ### Aliases: EULERMASCHERONICONSTANT APERYCONSTANT
> ### Keywords: sysdata
> 
> ### ** Examples
> 
> EULERMASCHERONICONSTANT
[1] 0.5772157
> APERYCONSTANT
[1] 1.202057
> 
> 
> 
> cleanEx()
> nameEx("Var")
> ### * Var
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: var
> ### Title: Generic Functions for the Computation of Functionals
> ### Aliases: var var-methods var,Gumbel-method var,GPareto-method
> ###   var,GEV-method var,Pareto-method median median-methods
> ###   median,Gumbel-method median,GEV-method median,GPareto-method
> ###   median,Pareto-method IQR IQR-methods IQR,Gumbel-method
> ###   IQR,GPareto-method IQR,GEV-method IQR,Pareto-method skewness
> ###   skewness-methods skewness,Gumbel-method skewness,GEV-method
> ###   skewness,GPareto-method skewness,Pareto-method kurtosis
> ###   kurtosis-methods kurtosis,Gumbel-method kurtosis,GEV-method
> ###   kurtosis,GPareto-method kurtosis,Pareto-method Sn Sn-methods
> ###   Sn,ANY-method Sn,UnivariateDistribution-method Sn,Norm-method
> ###   Sn,AffLinDistribution-method Sn,GPareto-method Sn,Gammad-method
> ###   Sn,Weibull-method Sn,GEV-method Sn,Pareto-method
> ###   Sn,DiscreteDistribution-method Qn Qn-methods Qn,ANY-method
> ###   Qn,UnivariateDistribution-method Qn,Norm-method
> ###   Qn,DiscreteDistribution-method Qn,AffLinDistribution-method
> ### Keywords: methods distribution
> 
> ### ** Examples
> 
> # Variance of Exp(1) distribution
> G <- GPareto()
> var(G)
[1] 1
> 
> #median(Exp())
> IQR(G)
[1] 1.098612
> 
> ## note the timing
> system.time(print(Sn(GPareto(shape=0.5,scale=2))))
[1] 1.519379
   user  system elapsed 
   0.07    0.09    0.19 
> 
> 
> 
> cleanEx()
> nameEx("WeibullFamily")
> ### * WeibullFamily
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: WeibullFamily
> ### Title: Generating function for Weibull family
> ### Aliases: WeibullFamily
> ### Keywords: models
> 
> ### ** Examples
> 
> (G1 <- WeibullFamily())
An object of class "WeibullFamily"
### name:	Weibull Family

### distribution:	Distribution Object of Class: Weibull
 shape: 0.5
 scale: 1

### param:	An object of class "ParamWithScaleAndShapeFamParameter"
name:	theta
scale:	1
shape:	0.5
trafo:
function(x){ list(fval = tau(x), mat = Dtau(x)) }
<bytecode: 0x0000026082566380>
<environment: 0x000002608116ce38>
Shape parameter must not be negative.
> FisherInfo(G1)
An object of class "PosSemDefSymmMatrix"
           scale      shape
scale  0.2500000 -0.4227843
shape -0.4227843  7.2947226
> checkL2deriv(G1)
precision of centering:	 -1.021224e-06 1.323528e-05 
precision of Fisher information:
            scale       shape
scale -8.9966e-06  9.3591e-05
shape  9.3591e-05 -8.8614e-04
precision of Fisher information - relativ error [%]:
     [,1]    [,2]   
[1,] -0.0036 -0.0221
[2,] -0.0221 -0.0121
condition of Fisher information:
[1] 34.749
> 
> 
> 
> cleanEx()
> nameEx("asvarMedkMAD")
> ### * asvarMedkMAD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asvarMedkMAD
> ### Title: Function to compute asymptotic variance of MedkMAD estimator
> ### Aliases: asvarMedkMAD
> ### Keywords: asymptotic variance
> 
> ### ** Examples
> 
> GP <- GParetoFamily(scale=1,shape=0.7)
> asvarMedkMAD(GP,k=1)
An object of class "PosSemDefSymmMatrix"
          scale     shape
scale  6.998417 -9.139641
shape -9.139641 22.551077
> 
> ## for didactical purposes turn GP into a non-GPD
> setClass("noGP",contains="L2ScaleShapeUnion")
> GP2 <- GP
> class(GP2) <- "noGP"
> asvarMedkMAD(GP2,k=1) ### uses numerical integration
An object of class "PosSemDefSymmMatrix"
          scale     shape
scale  6.998167 -9.137336
shape -9.137336 22.541322
> 
> 
> 
> cleanEx()
> nameEx("asvarPickands")
> ### * asvarPickands
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asvarPickands
> ### Title: Function to compute asymptotic variance of Pickands estimator
> ### Aliases: asvarPickands
> ### Keywords: asymptotic variance
> 
> ### ** Examples
> 
> GP <- GParetoFamily(scale=1,shape=0.7)
> asvarPickands(GP)
An object of class "PosSemDefSymmMatrix"
          scale     shape
scale  7.823443 -9.092618
shape -9.092618 16.417125
> asvarPickands(GP,alpha=2.3)
An object of class "PosSemDefSymmMatrix"
          scale     shape
scale  7.823716 -7.797981
shape -7.797981 12.285680
> GE <- GEVFamily(loc=0,scale=1,shape=0.7)
> asvarPickands(GE)
An object of class "PosSemDefSymmMatrix"
          scale     shape
scale  19.33010 -19.45835
shape -19.45835  27.43467
> GE0 <- GEVFamilyMuUnknown(loc=0,scale=1,shape=0.7)
> asvarPickands(GE0)
An object of class "PosSemDefSymmMatrix"
            loc      scale      shape
loc    1.718282   3.306939  -2.521934
scale  3.306939  19.330100 -19.458348
shape -2.521934 -19.458348  27.434672
> 
> 
> 
> 
> cleanEx()
> nameEx("asvarQBCC")
> ### * asvarQBCC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asvarQBCC
> ### Title: Function to compute asymptotic variance of QuantileBCC estimator
> ### Aliases: asvarQBCC
> ### Keywords: asymptotic variance
> 
> ### ** Examples
> 
> GP <- WeibullFamily(scale=1,shape=0.7)
> asvarQBCC(GP)
An object of class "PosSemDefSymmMatrix"
          scale     shape
scale  1.972702 -2.020905
shape -2.020905  5.039604
> asvarQBCC(GP, p1=1/4, p2= 5/8)
An object of class "PosSemDefSymmMatrix"
          scale     shape
scale  1.722745 -1.675345
shape -1.675345  5.926309
> 
> 
> 
> cleanEx()
> nameEx("getCVaR")
> ### * getCVaR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCVaR
> ### Title: Risk Measures for Scale-Shape Families
> ### Aliases: getVaR getCVaR getEL print.riskMeasure
> ### Keywords: risk measure
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("interpolateSn")
> ### * interpolateSn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: interpolateSn
> ### Title: Function to compute LD (location-dispersion) estimates
> ### Aliases: interpolateSn getShapeGrid getSnGrid
> ### Keywords: univar
> 
> ### ** Examples
> 
> ## (empirical) Data
> getShapeGrid(50)
 [1] 0.00850009 0.01700018 0.24958584 0.38461538 0.47621613 0.70000000
 [7] 0.76923077 0.92378387 1.15041416 1.15384615 1.38299982 1.53846154
[13] 1.62524113 1.88192528 1.92307692 2.15978942 2.30769231 2.46923251
[19] 2.69230769 2.82824713 3.07692308 3.27349783 3.46153846 3.84615385
[25] 3.90458531 4.23076923 4.61538462 5.00000000 5.35269575 5.38461538
[31] 5.44042860 5.53835930 5.64947930 5.76923077 5.77836963 5.93259641
[37] 6.12610378 6.15384615 6.38952648 6.53846154 6.81760871 6.92307692
[43] 7.22153498 7.30769231 7.69230769 8.07692308 8.46153846 8.84615385
[49] 9.23076923 9.61538462
> head(getShapeGrid(withPos=FALSE))
[1] -5.881053 -4.912517 -4.522280 -4.265561 -4.071333 -3.913806
> 
> ## Not run: 
> ##D ### code used for the grid stored in the namespace of distrMod:
> ##D getSnGrid()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ismevgpdgevdiag-methods")
> ### * ismevgpdgevdiag-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ismevgpdgevdiag-methods
> ### Title: Methods for Diagnostic Functions in Package 'RobExtremes'
> ### Aliases: gpd.diag gev.diag gpd.prof gev.prof gpd.profxi gev.profxi
> ###   gpd.diag-methods gev.diag-methods gpd.profxi-methods
> ###   gev.profxi-methods gpd.diag,GPDEstimate-method
> ###   gpd.diag,gpd.fit-method gev.diag,GEVEstimate-method
> ###   gev.diag,gev.fit-method gpd.prof,GPDEstimate-method
> ###   gpd.prof,gpd.fit-method gev.prof,GEVEstimate-method
> ###   gev.prof,gev.fit-method gpd.profxi,GPDEstimate-method
> ###   gpd.profxi,gpd.fit-method gev.profxi,GEVEstimate-method
> ###   gev.profxi,gev.fit-method
> ### Keywords: graphics
> 
> ### ** Examples
> 
> if(require(ismev)){
+   ## from ismev
+   data(portpirie)
+   data(rain)
+ 
+   detach(package:ismev)
+   ppfit <- ismev::gev.fit(portpirie[,2])
+   gev.diag(ppfit)
+   ##
+   (mlE <- MLEstimator(portpirie[,2], GEVFamilyMuUnknown(withPos=FALSE)))
+   gev.diag(mlE)
+ 
+ }
Loading required package: ismev
Loading required package: mgcv
Loading required package: nlme

Attaching package: 'nlme'

The following object is masked from 'package:rrcov':

    getData

The following object is masked from 'package:RandVar':

    Dim

This is mgcv 1.9-1. For overview type 'help("mgcv-package")'.

Attaching package: 'ismev'

The following objects are masked from 'package:RobExtremes':

    gev.diag, gev.prof, gev.profxi, gpd.diag, gpd.prof, gpd.profxi

$conv
[1] 0

$nllh
[1] -4.339058

$mle
[1]  3.87474692  0.19804120 -0.05008773

$se
[1] 0.02793211 0.02024610 0.09825633

> 
> 
> 
> cleanEx()

detaching 'package:mgcv', 'package:nlme'

> nameEx("kMAD")
> ### * kMAD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: kMAD
> ### Title: Asymmetric Median of Absolute Deviations for Skewed
> ###   Distributions
> ### Aliases: kMAD kMAD-methods kMAD,UnivariateDistribution,numeric-method
> ###   kMAD,numeric,numeric-method
> ### Keywords: scale estimator
> 
> ### ** Examples
> 
> x <- rnorm(100)
> kMAD(x,k=10)
[1] 0.1351646
> kMAD(Norm(),k=10)
[1] 0.1543645
> 
> 
> 
> cleanEx()
> nameEx("validParameter-methods")
> ### * validParameter-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: validParameter-methods
> ### Title: Methods for function validParameter in Package 'RobExtremes'
> ### Aliases: validParameter-methods validParameter
> ###   validParameter,GParetoFamily-method
> ###   validParameter,WeibullFamily-method validParameter,GEVFamily-method
> ###   validParameter,ParetoFamily-method
> ###   validParameter,GEVFamilyMuUnknown-method
> ### Keywords: models
> 
> ### ** Examples
> 
>  G <- GParetoFamily()
>  validParameter(G, c(scale=0.1, shape=2))
[1] TRUE
>  validParameter(G, c(scale=-0.1, shape=-2))
[1] FALSE
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.06 0.61 7.73 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
